@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

@{
	CCatalog catalog = (CCatalog)ViewData["catalog"];
    if (catalog != null)
	{
		var attributes = new Dictionary<string, object>();
		attributes.Add("Id", "filterForm");

		using (Html.BeginForm(null, null, FormMethod.Get, attributes))
		{
		<div class="form-horizontal filters">
			<fieldset class="form-group">
				<legend class="categories">Categories</legend><ul>
				@{
					foreach (CCategory cat in catalog.Categories)
					{
						<li><a href="/goods/@cat.CategoryId">@cat.Category &nbsp; <span class="count">(@cat.RecordsCnt)</span></a></li>
					}
				 }
				</ul>
				
				<legend class="categories">Refine <span class="clearall">Clear all</span></legend>
				
				<a class="filter-title" role="button" data-toggle="collapse" href="#collapseBrands" aria-expanded="true" aria-controls="collapseBrands">Brands <span></span></a>
				
				<div class="collapse in" id="collapseBrands">
				  <div class="checkbox checkboxlist">
						@{
							var brValues = Request.QueryString.GetValues("brand");
							foreach (CBrand br in catalog.Brands)
							{
								
								
									bool bchecked = false;

									if (brValues != null)
									{
										foreach (String item in brValues)
										{
											if (item == br.Brand)
											{
												bchecked = true;
												break;
											}
										}
									}

									if (bchecked)
									{
										<span class="checked"><input  type="checkbox" name="brand" checked="@br.Brand" value="@br.Brand"/> @br.Brand (@br.RecordsCnt)</span>
									}
									else
									{
										<span><input type="checkbox" name="brand" value="@br.Brand"/> @br.Brand (@br.RecordsCnt)</span>
									}

								
								
							}
						}
					</div>
				</div>
				<div class="clear"></div>
				
				<a class="filter-title" role="button" data-toggle="collapse" href="#collapsePrice" aria-expanded="true" aria-controls="collapsePrice">Price range <span></span></a>
				<div class="collapse in" id="collapsePrice">
					<div id="slider-range"></div>
					@{
						string minp = catalog.PriceMin.ToString();
						string maxp = catalog.PriceMax.ToString();
						if (Request.QueryString["priceMin"]!= null)
						{
							minp = Request.QueryString["priceMin"];
						}
						if (Request.QueryString["priceMax"]!= null)
						{
							maxp = Request.QueryString["priceMax"];
						}
					}
					<span class="price-min">&euro; <input name="priceMin" type="text"  value="@minp"/> </span>
					<span class="price-max">&euro; <input name="priceMax" type="text"  value="@maxp"/></span>

				 
					
					
					
					</div>
				<div class="clear"></div>
				
					@{
					
						foreach (CFilter f in catalog.Filters)
						{
							if(f.Values.Count() > 0) {
							<a class="filter-title collapsed" role="button" data-toggle="collapse" href="#collapseParam_@f.PropertyId" aria-expanded="false" aria-controls="collapseParam@f.PropertyId">@f.Name <span></span></a>
	
							<div class="collapse" id="collapseParam_@f.PropertyId">
							<div class="checkbox checkboxlist">
							@{
								foreach (CValue v in f.Values)
								{
									string vals = Request.QueryString.Get("f_" + f.PropertyId);
									if (vals!= null && vals.Contains(v.ValueId.ToString()))
									{
										<span class="checked"><input type="checkbox" name="f_@f.PropertyId" checked="@v.ValueId" value="@v.ValueId"/> @v.Value (@v.RecordsCnt)</span>
									}
									else
									{
										<span><input type="checkbox" name="f_@f.PropertyId" value="@v.ValueId"/> @v.Value (@v.RecordsCnt)</span>
									}
								}
							}
							</div>
							</div>
							<div class="clear"></div>
						}
						}
					}
				
					
						
			</fieldset>
		</div>
		<button type="submit" class="filter-apply" >Apply</button>
		}
	}
}
  
